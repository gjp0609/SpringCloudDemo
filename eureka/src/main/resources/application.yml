spring:
  application:
    name: Eureka
  security:
    user:
      password: me
      name: 123
server:
  port: 8000
eureka:
  instance:
    hostname: peer0
  # 在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为
  client:
    # 表示是否将自己注册到 Eureka Server，默认为 true
    register-with-eureka: false
    # 表示是否从 Eureka Server获取注册信息，默认为 true
    fetch-registry: false
    serviceUrl:
      # 设置与 Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址
      # 默认是 http://localhost:8761/eureka ；多个地址可使用 , 分隔
      defaultZone: http://peer0:${server.port}/

---
spring:
  profiles: peer1
  application:
    name: Eureka
server:
  port: 8001
eureka:
  instance:
    hostname: peer1
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      # 设置与 Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址
      # 默认是 http://localhost:8761/eureka ；多个地址可使用 , 分隔
      defaultZone: http://peer2:8002/eureka/,http://peer3:8003/eureka/

---
spring:
  profiles: peer2
  application:
    name: Eureka
server:
  port: 8002
eureka:
  instance:
    hostname: peer2
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      # 设置与 Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址
      # 默认是 http://localhost:8761/eureka ；多个地址可使用 , 分隔
      defaultZone: http://peer1:8001/eureka/,http://peer3:8003/eureka/

---
spring:
  profiles: peer3
  application:
    name: Eureka
server:
  port: 8003
eureka:
  instance:
    hostname: peer3
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      # 设置与 Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址
      # 默认是 http://localhost:8761/eureka ；多个地址可使用 , 分隔
      defaultZone: http://peer1:8001/eureka/,http://peer2:8002/eureka/
